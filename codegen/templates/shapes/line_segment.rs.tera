{% if int_based == true -%}
use crate::ivec2::{LineIter, LineDrawAlgo};
{% else -%}
use crate::vec2::{LineIter, LineDrawAlgo};
{% endif -%}

{% if int_based != true -%}
#[derive(Debug, Copy, Clone, Default)]
{% else -%}
#[derive(Debug, Copy, Clone, PartialEq, Eq, Default)]
{% endif -%}
pub struct LineSegment {
    pub start: glam::{{ glam_type }},
    pub end: glam::{{ glam_type }},
}

impl LineSegment {
    pub fn new(start: glam::{{ glam_type }}, end: glam::{{ glam_type }}) -> Self {
        Self { 
            start, 
            end 
        }
    }

    /// Create a new line segment from a start point, a direction and a length
    pub fn new_from_length(start: glam::{{ glam_type }}, dir: glam::{{ glam_type }}, length: {{ num_type }}) -> Self {
        Self { start, end: start + dir * length }
    }

    {% if int_based -%}
    pub fn pixel_iter(&self, draw_mode: LineDrawAlgo) -> impl Iterator<Item = glam::IVec2> {
    {% else -%}
    pub fn pixel_iter(&self, draw_mode: LineDrawAlgo) -> impl Iterator<Item = glam::Vec2> {
    {% endif -%}
        {% if glam_type == "UVec2" %}
        let iseg = crate::ivec2::LineSegment::new(self.start.as_ivec2(), self.end.as_ivec2());
        LineIter::new_from_segment(iseg, draw_mode)
        {% else -%}
        LineIter::new_from_segment(*self, draw_mode)
        {% endif %}
    }

    

    pub fn length (&self) -> {{ num_type }} {
        {% if int_based -%}
            self.start.as_vec2().distance_squared(self.end.as_vec2()).sqrt() as {{ num_type }}
        {% else -%}
            self.start.distance_squared(self.end).sqrt()
        {% endif %}
    }
    {% if glam_type != "Vec2" %}
    pub fn as_vec2(&self) -> crate::vec2::LineSegment {
        crate::vec2::LineSegment {
            start: self.start.as_vec2(),
            end: self.end.as_vec2()
        }
    }
    {% endif %}
    {% if glam_type != "IVec2" %}
    pub fn as_ivec2(&self) -> crate::ivec2::LineSegment {
        crate::ivec2::LineSegment {
            start: self.start.as_ivec2(),
            end: self.end.as_ivec2()
        }
    }
    {% endif -%}    
    {% if glam_type != "UVec2" %}
    pub fn as_uvec2(&self) -> crate::uvec2::LineSegment {
        crate::uvec2::LineSegment {
            start: self.start.as_uvec2(),
            end: self.end.as_uvec2()
        }
    }
    {% endif -%}
}

