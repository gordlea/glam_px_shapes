{% set struct_name = name -%}
{% block content -%}
{% if int_based != true -%}
use approx::AbsDiffEq;
{% endif %}
use glam::{{ glam_type }};
{% if glam_type != "IVec2" -%}
use glam::IVec2;
{% endif -%}
use crate::iters::circle_iter::CirclePoints;
use super::rectangle::Rectangle;

{% if int_based != true -%}
#[derive(Debug, Copy, Clone, Default)]
{% else -%}
#[derive(Debug, Copy, Clone, PartialEq, Eq, Default)]
{% endif -%}
pub struct {{ struct_name }} {
    pub(crate) pos: {{ glam_type }},
    pub(crate) radius: {{ num_type }},
    pub(crate) limits: Option<Rectangle>,
}
{% if int_based != true %}
impl PartialEq for {{ struct_name }} {
    fn eq(&self, other: &{{ struct_name }}) -> bool {
        self.pos.abs_diff_eq(other.pos, f32::EPSILON) 
            && self.radius.abs_diff_eq(&other.radius, f32::EPSILON)
            && self.limits == other.limits
    }
}

impl Eq for {{ struct_name }} {}
{% endif %}
impl {{ struct_name }} {
    pub const fn new(pos: {{ glam_type }}, radius: {{ num_type }}) -> Self {
        Self {
            pos,
            radius,
            limits: None,
        }
    }

    /// Returns the bounding box of the circle, disregarding the limits.
    pub fn bounding_box(&self) -> Rectangle {
        let r = {{ glam_type }}::splat(self.radius);
        let tl = self.pos - r;
        let br = self.pos + r;
        Rectangle::new(tl, br)
    }

    // /// Returns the bounding box of the circle, respecting limits.
    pub fn limited_bounding_box(&self) -> Rectangle {
        if let Some(limits) = self.limits {
            let r = {{ glam_type }}::splat(self.radius);
            let tl = (self.pos - r).max(limits.tl);
            let br = (self.pos + r).min(limits.br);
            Rectangle::new(tl, br)
        } else {
            self.bounding_box()
        }
    }

    /// Return the center point of the circle scaled by a factor of 2
    ///
    /// This method is used to accurately calculate the outside edge of the circle.
    /// The result is not equivalent to `self.center() * 2` because of rounding.
    #[allow(dead_code)]
    pub(crate) fn center_2x(&self) -> {{ glam_type }} {
        // The radius scaled up by a factor of 2 is equal to the diamete
        let radius_2x = self.radius * 2{{num_suffix}} - 1{{num_suffix}};
        (self.pos - {{ glam_type }}::splat(self.radius)) * 2{{num_suffix}} + {{ glam_type }}::splat(radius_2x)
    }

    /// Returns the threshold for this circles diameter.
    #[allow(dead_code)]
    pub(crate) fn threshold(&self) -> {{ num_type }} {
        diameter_to_threshold(self.radius * 2{{num_suffix}})
    }

    pub const fn new_with_limits(pos: {{ glam_type }}, radius: {{ num_type }}, limits: Rectangle) -> Self {
        Self {
            pos,
            radius,
            limits: Some(limits),
        }
    }

    /// Returns an iterator over the pixels of the circle.
    pub fn pixel_iter(&self, outline: bool) -> CirclePoints {
        {% if glam_type == "IVec2" %}
        CirclePoints::new(self, outline)
        {% else %}
        CirclePoints::new(&self.as_circle_ivec2(), outline)
        {% endif %}
    }
    {% if glam_type != "IVec2" %}
    pub fn as_circle_ivec2(&self) -> crate::ivec2::Circle {
        crate::ivec2::Circle::new(self.pos.as_ivec2(), self.radius as i32)
    }
    {% endif %}

    {% if glam_type != "Vec2" %}
    pub fn as_circle_vec2(&self) -> crate::vec2::Circle {
        crate::vec2::Circle::new(self.pos.as_vec2(), self.radius as f32)
    }
    {% endif %}

    {% if glam_type != "UVec2" %}
    pub fn as_circle_uvec2(&self) -> crate::uvec2::Circle {
        crate::uvec2::Circle::new(self.pos.as_uvec2(), self.radius as u32)
    }
    {% endif %}
}

impl crate::Shape<{{ glam_type }}> for {{ struct_name}} {
    fn position(&self) -> {{ glam_type }} {
        self.pos
    }

    fn center(&self) -> {{ glam_type }} {
        self.pos
    }

    fn contains(&self, coord: {{ glam_type }}) -> bool {
        {% if int_based == true -%}
        let delta = self.center_2x() - coord * 2;
        {% else %}
        let delta = self.center_2x() - coord * 2.0;
        {% endif %}
        let distance = delta.length_squared();

        distance < self.threshold()
    }

    fn pixel_iter(&self, outline: bool) -> impl Iterator<Item = IVec2> {
        self.pixel_iter(outline)
    }
}

pub(crate) fn diameter_to_threshold(diameter: {{ num_type }}) -> {{ num_type }} {
    if diameter <= 4{{num_suffix}} { 
        {% if int_based == true -%}
        diameter.pow(2) - diameter / 2
        {% else -%}
        diameter.powf(2.0) - diameter / 2.0 - 1.0
        {% endif -%}
    } else { 
        {% if int_based == true -%}
        diameter.pow(2)
        {% else -%}
        diameter.powf(2.0)
        {% endif -%}
    }
}

{% endblock %}